Python --

==================================================
## LIST 
Accessing elements of a List #

# Use Case	              # Method
Access a specific item	  list[index]
Loop through all items	  for item in list:
Need index and value	  for i, item in enumerate(list):
Filter items	          Use if inside loop

fruits = ['apple', 'banana', 'cherry']
print(fruits[0])  # Output: apple
print(fruits[2])  # Output: cherry

for fruit in fruits:
    if 'a' in fruit:
        print(fruit)

for i, fruit in enumerate(fruits):
    print(f"Index {i}: {fruit}")
 # Output: apple
 # Output: banana

for i in range(len(fruits)):
    print(f"Index {i}: {fruits[i]}")

==================================================
## TUPLES 

marks = (85, 90, 85, 92, 85)

count = 0
for mark in marks:
    if mark == 85:
        count +=1
print(count)


==================================================
## DICTIONARY 

students = [
    {'name': 'Ravi', 'marks': 85},
    {'name': 'Anita', 'marks': 92},
    {'name': 'Kumar', 'marks': 78}
]

names = []
count = 0

# get method

for student in students:
    if student.get('marks') > 80:
       names.append(student.get('name'))
       count += 1
print(set(names))
print(count)

# Items method 

student1 = {'name': 'Ravi', 'age': 21, 'grade': 'A'}
student1_list = student1.items()
print(student1_list)

# isinstance method
for k,v in student1.items():
    print(f"{ k } : { v }")
    if isinstance(v, str):
        print(v)

==================================================

list_nums = [12,12,34,55,67,88,89,85]
list_rev=[]

# Reverse List elements

def rev_list(nums):
    for i in range(len(nums)):
        list_rev.append(nums[-i])
rev_list(list_nums)
print(list_rev)

def rev_list(nums):
  return nums[::-1]
print(rev_list(list_nums))

def even_sum(nums):
    even_nums=[]
    len_nums=len(nums)
    for i in range(len_nums):
        if nums[i]%2==0:
            even_nums.append(nums[i])
    return sum(even_nums)

even_sum(list_nums)

even_sum = lambda nums: sum(num for num in nums if num % 2 == 0)
even_sum(list_nums)

len_list = len(list_nums_1)

==================================================
# Remove duplicates from a list
def remove_dup(nums):
    i=0
    while i < len_list-1:
        if list_nums_1[i]==list_nums_1[i+1]:
            list_nums_1.remove(list_nums_1[i+1])
        else:
            i+=1
    return list_nums_1
remove_dup(list_nums_1)

==================================================

def squared_nums(nums):
    squared_nums=[]
    for num in nums:
        squared_nums.append(num**2)
    return squared_nums
squared_nums(list_nums_1)

==================================================
list_1 = [1,2,3,4,5,6,7,8,9,10]
k=2
# Break the list in 2 parts at kth elements from last and then merge the list
def rotate_list(nums,k):
    list1 = nums[:len(nums)-k]
    list2 = nums[len(nums)-k:]
    return list2 + list1
rotate_list(list_1,k)


def rotate_list(nums,k):
    return nums[len(nums)-k:] + nums[:len(nums)-k]
rotate_list(list_1,k)

==================================================

#Count the number of vowels in a given string.
word = 'AnkitaRiya'
def count_vowels(word):
    vowels = ['a','e','i','o','u','A','E','I','O','U']
    count = 0
    for char in word:
        if char in vowels:
            count += 1
    return count
count_vowels(word)

==================================================

#Reverse the string without using slicing.
def reverse_string(word1,word2):
    reversed_string=""
    reversed_string1=""
    print(word)
    for char in word:
        reversed_string = char + reversed_string
        reversed_string1 = reversed_string1 + char
    return reversed_string,reversed_string1

reverse_string(word,word)

==================================================

#Write a function to find the first non-repeating character in a string. If all characters repeat, return None.
def first_non_repeating_character(string):
    repeat_char=[]
    non_repeat_char=[]
    for char in string:
        if string.count(char) > 1:
            repeat_char.append(char)
        else:
            non_repeat_char.append(char)
    
    if len(non_repeat_char) == 0:
        return None
    else:
        return non_repeat_char[0]
    
first_non_repeating_character(word)


========================================================================================================================================================================================================

      |__LG



