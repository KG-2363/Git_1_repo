
## Classes and Objects

class Student():
    def __init__(self, name, age):
        self.name = name
        self.age = age
s1= Student("Karan", 25)
print(s1.name)
print(s1.age)


class Student():
    def __init__(self, name, maths_marks, science_marks, english_marks):
        self.name = name
        self.maths_marks = maths_marks
        self.science_marks = science_marks
        self.english_marks = english_marks
    def avg_marks(self):
        return (self.maths_marks + self.science_marks + self.english_marks)/3
s1= Student("Karan", 98, 99, 100)
s2= Student("Govind", 95, 89, 92)

def students_marks_report():
    students = [s1,s2]
    for i in range(len(students)):
        print(f" Name of Student {students[i].name} and Average Marks {students[i].avg_marks()}")

==================================================
import pandas as pd

data = {
    'name': ['Karan', 'Govind'],
    'maths_marks': [98, 95],
    'science_marks': [99, 89],
    'english_marks': [100, 92]
}
students_df = pd.DataFrame(data)
display(students_df)

def students_marks_report():
    students = [s1,s2]
    for i in range(len(students)):
        print(f" Name of Student {students[i].name} and Average Marks {students[i].avg_marks()}")
==================================================

def account():
   def __init__(self, account_no, balance):
       self.account_no = account_no
       self.balance = balance

   def deposit(self, amount):
       self.balance += amount

   def withdraw(self, amount):
       if self.balance >= amount:
           self.balance -= amount
       else:
           print("Insufficient balance")
           
   def get_balance(self):
       return self.balance
account_no = 1234567890
balance = 1000
account = Account(account_no, balance)
account.deposit(500)
account.withdraw(200)
balance = account.get_balance()
print(f"Account balance: {balance}")

==================================================

class Circle:
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return 3.14 * self.radius ** 2

    def perimeter(self):
        return 2 * 3.14 * self.radius
circle = Circle(5)
print(circle.area())
print(circle.perimeter())


==================================================
class Employee:
    def __init__(self,role,dept,salary):
        self.role = role
        self.dept = dept
        self.salary = salary

    def showDetails(self):
        print(f"Employee role is {self.role} and department is {self.dept} and salary is {self.salary}")

class Engineer(Employee):
    def __init__(self, name,age):
        self.name = name 
        self.age = age
        super().__init__("Engineer","IT",75000)
        print("Engineer class constructor")
        

engg1 = Engineer("Karan", 24)
print( engg1.name, engg1.age, engg1.role, engg1.dept, engg1.salary)
engg1.showDetails()

==================================================

class Order:
    def __init__(self,item,price):
        self.item=item
        self.price=price

    def __gt__(self,other):
        return self.price>other.price
order1=Order("Laptop",1000)
order2=Order("Mobile",500)
print(order1>order2)    

==================================================

class Node:
    def __init__(self, data = None, next = None):
        self.data = data
        self.next = next

class LinkedList:
    def __init__(self):
        self.head = None

    def print(self):
        if self.head is None:
            print("Linked list is empty")
            return
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data)+' --> ' if itr.next else str(itr.data)
            itr = itr.next
        print(llstr)

    def insert_at_beginning(self, data):
        node = Node(data, self.head)
        self.head = node


    def insert_at_end(self, data):
        if self.head is None:
            self.head = Node(data, None)
            return
        itr = self.head
        while itr.next:
            itr = itr.next

        itr.next = Node(data, None)


    def insert_values(self, data_list):
        self.head = None
        for data in data_list:
            self.insert_at_end(data)


    def get_length(self):
        count = 0
        itr = self.head
        while itr:
            count+=1
            itr = itr.next

        return count

    def remove_at(self, index):
        if index<0 or index>=self.get_length():
            raise Exception("Invalid Index")    
        if index==0:
            self.head = self.head.next
            return

        count = 0
        itr = self.head
        while itr:       
            if count == index - 1:
                itr.next = itr.next.next
                break   
            itr = itr.next
            count+=1


    def insert_at(self, index, data):
        if index<0 or index>self.get_length():
            raise Exception("Invalid Index")

        if index==0:
            self.insert_at_beginning(data)
            return

        count = 0        
        itr = self.head
        while itr:
            if count == index - 1:
                node = Node(data, itr.next)
                itr.next = node
                break

            itr = itr.next
            count+=1

    def insert_after_value(self, data_after, data_to_insert):
        if self.head is None:
            return

        if self.head.data==data_after:
            self.head.next = Node(data_to_insert,self.head.next)
            return

        itr = self.head
        while itr:
            if itr.data == data_after:
                itr.next = Node(data_to_insert,itr.next)
                break

            itr = itr.next

    def remove_by_value(self, data):
        if self.head is None:
            return

        if self.head.data==data:
            self.head = self.head.next
            return

        itr = self.head
        while itr.next:
            if itr.next.data == data:
                itr.next = itr.next.next
                break
            itr = itr.next
    def __repr__(self):
        if self.head is None:
            return "Linked list is empty"
        itr = self.head
        llstr = ''
        while itr:
            llstr += str(itr.data)+' --> ' if itr.next else str(itr.data)
            itr = itr.next
        return llstr    
    def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev
ll = LinkedList()
ll.insert_values(["banana","mango","grapes","orange"])
ll.reverse()
print(ll)



ll.remove_by_value("mango")
print(ll)


ll.insert_after_value("banana","figs")
ll.print()


class TreeNode:
  def __init__(self, data):
    self.data = data
    self.children = []
    self.parent = None

  def add_child(self, child):
    child.parent = self
    self.children.append(child)

  def get_level(self):
    level = 0
    p = self.parent
    while p:
      level += 1
      p = p.parent

    return level

  def print_tree(self):
    spaces = ' ' * self.get_level() * 3
    prefix = spaces + "|__" if self.parent else ""
    print(prefix + self.data)
    if self.children:
      for child in self.children:
        child.print_tree()

  def build_product_tree():
    root = TreeNode("Electronics")

    laptop = TreeNode("Laptop")
    laptop.add_child(TreeNode("Mac"))
    laptop.add_child(TreeNode("Surface")) 

    phone = TreeNode("Phone")
    phone.add_child(TreeNode("iPhone"))
    phone.add_child(TreeNode("Google Pixel"))

    tv = TreeNode("TV")
    tv.add_child(TreeNode("Samsung"))
    tv.add_child(TreeNode("LG"))

    root.add_child(laptop)
    root.add_child(phone)
    root.add_child(tv)

    return root
root = TreeNode.build_product_tree()
root.print_tree()


Electronics
   |__Laptop
      |__Mac
      |__Surface
   |__Phone
      |__iPhone
      |__Google Pixel
   |__TV
      |__Samsung
